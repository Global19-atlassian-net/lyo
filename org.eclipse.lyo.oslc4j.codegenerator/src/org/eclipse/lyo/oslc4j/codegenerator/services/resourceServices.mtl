[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     
 *******************************************************************************/
/]

[module resourceServices('http://org.eclipse.lyo/oslc4j/adaptorInterface')/]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]

[query public queryCapabilities(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(QueryCapability) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.queryCapabilities->select(aQueryCapability : QueryCapability | aQueryCapability.resourceTypes->includes(aResource))->asSet()
/]

[query public creationFactories(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(CreationFactory) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.creationFactories->select(aCreationFactory : CreationFactory | aCreationFactory.resourceTypes->includes(aResource))->asSet()
/]

[query public selectionDialogs(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(Dialog) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.selectionDialogs->select(aDialog : Dialog | aDialog.resourceTypes->includes(aResource))->asSet()
/]

[query public creationDialogs(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(Dialog) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.creationDialogs->select(aDialog : Dialog | aDialog.resourceTypes->includes(aResource))->asSet()
/]

[query public allProperties(aResource: Resource) : Set(ResourceProperty) = 
aResource.resourceProperties->union(inheritedProperties(aResource))
/]

[query public inheritedProperties(aResource: Resource) : Set(ResourceProperty) = 
    (if (not aResource.extends.oclIsUndefined()) then 
        aResource.extends.resourceProperties->union(inheritedProperties(aResource.extends))
    else
        Set{}
    endif)
/]

[query public prefixedName(aResource: Resource) : String = 
aResource.definingDomainSpecification().namespacePrefix.name.concat(':').concat(aResource.name)
/]

[comment TODO: in the Constants file, I generate constants that SHOULD match the URI developed here. But this code is not related to the way I generated the constants.
Make sure this query and the Constants generation are based on the same set of base functions. THat is, make sure both functions produce matching URI values in the end. /]
[query public typeURI(aResource: Resource) : String = 
aResource.definingDomainSpecification().namespaceURI.concat('#').concat(aResource.name)
/]

[query public javaClassPackageName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassBaseNamespace(anAdaptorInterface).concat('.resources')
/]

[query public javaClassName(aResource: Resource) : String = 
aResource.name.substituteAll(' ', '').toUpperFirst()
/]

[query public javaClassFullName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassPackageName(aResource, anAdaptorInterface).concat('.').concat(javaClassName(aResource))
/]

[query public javaClassFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaFilesBasePath(anAdaptorInterface).concat(javaClassPackageName(aResource, anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaClassName(aResource)).concat('.java')
/]

[query public javaClassPackageNameForService(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassBaseNamespace(anAdaptorInterface).concat('.services')
/]

[query public javaClassNameForService(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
aResource.name.substituteAll(' ', '').toUpperFirst().concat('Service')
/]

[query public javaClassFullNameForService(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassPackageNameForService(aResource, anAdaptorInterface).concat('.').concat(javaClassNameForService(aResource, anAdaptorInterface))
/]

[query public javaClassFullFileNameForService(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaFilesBasePath(anAdaptorInterface).concat(javaClassPackageNameForService(aResource, anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaClassNameForService(aResource, anAdaptorInterface)).concat('.java')
/]

[template public parentJavaClassName(aResource: Resource)] 
[if (aResource.extends.oclIsUndefined())]AbstractResource[else][javaClassName(aResource.extends) /][/if]

[/template]
