[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     
 *******************************************************************************/
/]

[module resourceServices('http://org.eclipse.lyo/oslc4j/adaptorInterface')/]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]

[query public directParentResource(aResource: Resource) : Resource =
    (if (aResource.extends->notEmpty()) then 
        aResource.extends->first()
    else
        null
    endif)
/]

[query public parentResources(aResource: Resource) : Set(Resource) =
    (if (directParentResource(aResource)->notEmpty()) then 
        directParentResource(aResource)->union(parentResources(directParentResource(aResource)))
    else
        Set{}
    endif)
/]

[query public allExtendingResources(aResource: Resource) : OrderedSet(Resource) =
	aResource.extends
	->union(
			aResource.extends->collectNested(r:Resource | allExtendingResources(r))->flatten()->asOrderedSet()
			)
	->asOrderedSet()
/]

[query public interfaceResources(aResource: Resource) : OrderedSet(Resource) =
	directInterfaceResources(aResource)
	->union(
			directInterfaceResources(aResource)->collectNested(r:Resource | allExtendingResources(r))->flatten()->asOrderedSet()
			)
	->asOrderedSet()
/]

[query private directInterfaceResources(aResource: Resource) : OrderedSet(Resource) =
	(if (aResource.extends->size() > 1) then 
        aResource.extends->subOrderedSet(2, aResource.extends->size())
    else
        OrderedSet{}
    endif)

/]

[query public directlyRelatedResources(aResource: Resource) : Set(Resource) =
	(aResource.resourceProperties->collect(p : ResourceProperty | p.range))->flatten()->asSet()
	->union(
		aResource.extends
	)->flatten()->asSet()
/]

[query private allRelatedResources(aResource: Resource, alreadyAnalysed : Set(Resource)) : Set(Resource) =
let drr : Set(Resource) = directlyRelatedResources(aResource) in 
	drr->collectNested(r : Resource | 
		Set{r}
		->union(directlyRelatedResources(r))
		->union(
			(if (alreadyAnalysed->includes(r)) then 
		        Set{}
		    else
				allRelatedResources(r, (Set{aResource}->union(drr))->union(alreadyAnalysed))
		    endif)
		)
	)->flatten()->asSet()
/]

[query public allRelatedResources(aResource: Resource) : Set(Resource) =
	allRelatedResources(aResource, Set{})
/]

[query public allProperties(aResource: Resource) : Sequence(ResourceProperty) = 
((aResource.resourceProperties->asSequence())
	->union(inheritedProperties(aResource))
	->union(interfaceProperties(aResource))
)
/]

[query public inheritedProperties(aResource: Resource) : Sequence(ResourceProperty) = 
    (if (not aResource.directParentResource().oclIsUndefined()) then 
        (aResource.directParentResource().resourceProperties->asSequence())->union(inheritedProperties(aResource.directParentResource()))
    else
        Sequence{}
    endif)
/]

[query public interfaceProperties(aResource: Resource) : Sequence(ResourceProperty) =
	aResource.interfaceResources().resourceProperties
/]

[query public javaName(aResource: Resource, toUpperFirst : Boolean) : String = 
javaString(aResource.name, toUpperFirst)
/]

[query public javaInstanceName(aResource: Resource) : String = 
javaName(aResource, false)
/]

[query public javaClassPackageName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassBaseNamespace(anAdaptorInterface).concat('.resources')
/]

[query public javaClassName(aResource: Resource) : String = 
javaName(aResource, true)
/]

[query public javaClassFullName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassPackageName(aResource, anAdaptorInterface).concat('.').concat(javaClassName(aResource))
/]

[query public javaClassFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaFilesBasePath(anAdaptorInterface).concatenatePaths(javaClassPackageName(aResource, anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaClassName(aResource)).concat('.java')
/]

[query public javaInterfacePackageName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassBaseNamespace(anAdaptorInterface).concat('.resources')
/]

[query public javaInterfaceName(aResource: Resource) : String = 
'I'.concat(javaName(aResource, true))
/]

[query public javaInterfaceFullName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaInterfacePackageName(aResource, anAdaptorInterface).concat('.').concat(javaInterfaceName(aResource))
/]

[query public javaInterfaceFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaFilesBasePath(anAdaptorInterface).concatenatePaths(javaInterfacePackageName(aResource, anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaInterfaceName(aResource)).concat('.java')
/]

